function f0(x, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, m1, m2, G)
    {
        return y6;
    }

    function f1(x, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, m1, m2, G)
    {
        return y7;
    }

    function f2(x, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, m1, m2, G)
    {
        return y8;
    }

    function f3(x, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, m1, m2, G)
    {
        return y9;
    }

    function f4(x, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, m1, m2, G)
    {
        return y10;
    }

    function f5(x, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, m1, m2, G)
    {
        return y11;
    }

    function f6(x, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, m1, m2, G)
    {

        var r = Math.sqrt ( (y3-y0)*(y3-y0) + (y4-y1)*(y4-y1)  + (y5-y2)*(y5-y2));
        return (G*m2*(y3-y0)/(r*r*r));
    }

    function f7(x, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, m1, m2, G)
    {
        var r = Math.sqrt ( (y3-y0)*(y3-y0) + (y4-y1)*(y4-y1)  + (y5-y2)*(y5-y2));
        return (G*m2*(y4-y1)/(r*r*r));
    }

    function f8(x, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, m1, m2, G)
    {
        var r = Math.sqrt ( (y3-y0)*(y3-y0) + (y4-y1)*(y4-y1)  + (y5-y2)*(y5-y2));
        return (G*m2*(y5-y2)/(r*r*r));
    }

    function f9(x, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, m1, m2, G)
    {
        var r = Math.sqrt ( (y3-y0)*(y3-y0) + (y4-y1)*(y4-y1)  + (y5-y2)*(y5-y2));
        return (G*m1*(y0-y3)/(r*r*r));
    }

    function f10(x, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, m1, m2, G)
    {
        var r = Math.sqrt ( (y3-y0)*(y3-y0) + (y4-y1)*(y4-y1)  + (y5-y2)*(y5-y2));
        return ( G*m1*(y1-y4)/(r*r*r));
    }

    function f11(x, y0, y1, y2, y3, y4, y5, y6, y7, y8, y9, y10, y11, m1, m2, G)
    {
        var r = Math.sqrt ( (y3-y0)*(y3-y0) + (y4-y1)*(y4-y1)  + (y5-y2)*(y5-y2));
        return (G*m1*(y2-y5)/(r*r*r));
    }

    function rk4(x, xstop, h, y, m1, m2, G, a, aRows)
    {
        
	/*
	x -             start  time
        xstop -         final time
        h -             time step
        y -             initial values
        y0, y1, y2 -    m1 initial position
        y3, y4, y5 -    m2 initial position
        y6, y7, y8 -    m1 initial velocity
        y9, y10, y11 -  m1 initial velocity
        m1 -            m1 mass
        m2 -            m2 mass
        G -             gravitational constant
        a -             array of solutions
    */

    /* k matrix */
      
	for (i=0; i<aRows; i++)
        {
            if (xstop - x < h)
                h = xstop - x;

            k1_1 = h * f0(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], m1, m2, G);
            k1_2 = h * f1(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], m1, m2, G);
            k1_3 = h * f2(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], m1, m2, G);
            k1_4 = h * f3(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], m1, m2, G);
            k1_5 = h * f4(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], m1, m2, G);
            k1_6 = h * f5(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], m1, m2, G);
            k1_7 = h * f6(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], m1, m2, G);
            k1_8 = h * f7(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], m1, m2, G);
            k1_9 = h * f8(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], m1, m2, G);
            k1_10 = h * f9(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], m1, m2, G);
            k1_11 = h * f10(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], m1, m2, G);
            k1_12 = h * f11(x, y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], m1, m2, G);

            k2_1 = h * f0(x + h/2, y[0] + k1_1/2, y[1] + k1_2/2, y[2] + k1_3/2 , y[3] + k1_4/2, y[4] + k1_5/2, y[5] + k1_6/2, y[6] + k1_7/2, y[7] + k1_8/2, y[8] + k1_9/2 , y[9] + k1_10/2, y[10] + k1_11/2, y[11] + k1_12/2, m1, m2, G);
            k2_2 = h * f1(x + h/2, y[0] + k1_1/2, y[1] + k1_2/2, y[2] + k1_3/2 , y[3] + k1_4/2, y[4] + k1_5/2, y[5] + k1_6/2, y[6] + k1_7/2, y[7] + k1_8/2, y[8] + k1_9/2 , y[9] + k1_10/2, y[10] + k1_11/2, y[11] + k1_12/2, m1, m2, G);
            k2_3 = h * f2(x + h/2, y[0] + k1_1/2, y[1] + k1_2/2, y[2] + k1_3/2 , y[3] + k1_4/2, y[4] + k1_5/2, y[5] + k1_6/2, y[6] + k1_7/2, y[7] + k1_8/2, y[8] + k1_9/2 , y[9] + k1_10/2, y[10] + k1_11/2, y[11] + k1_12/2, m1, m2, G);
            k2_4 = h * f3(x + h/2, y[0] + k1_1/2, y[1] + k1_2/2, y[2] + k1_3/2 , y[3] + k1_4/2, y[4] + k1_5/2, y[5] + k1_6/2, y[6] + k1_7/2, y[7] + k1_8/2, y[8] + k1_9/2 , y[9] + k1_10/2, y[10] + k1_11/2, y[11] + k1_12/2, m1, m2, G);
            k2_5 = h * f4(x + h/2, y[0] + k1_1/2, y[1] + k1_2/2, y[2] + k1_3/2 , y[3] + k1_4/2, y[4] + k1_5/2, y[5] + k1_6/2, y[6] + k1_7/2, y[7] + k1_8/2, y[8] + k1_9/2 , y[9] + k1_10/2, y[10] + k1_11/2, y[11] + k1_12/2, m1, m2, G);
            k2_6 = h * f5(x + h/2, y[0] + k1_1/2, y[1] + k1_2/2, y[2] + k1_3/2 , y[3] + k1_4/2, y[4] + k1_5/2, y[5] + k1_6/2, y[6] + k1_7/2, y[7] + k1_8/2, y[8] + k1_9/2 , y[9] + k1_10/2, y[10] + k1_11/2, y[11] + k1_12/2, m1, m2, G);
            k2_7 = h * f6(x + h/2, y[0] + k1_1/2, y[1] + k1_2/2, y[2] + k1_3/2 , y[3] + k1_4/2, y[4] + k1_5/2, y[5] + k1_6/2, y[6] + k1_7/2, y[7] + k1_8/2, y[8] + k1_9/2 , y[9] + k1_10/2, y[10] + k1_11/2, y[11] + k1_12/2, m1, m2, G);
            k2_8 = h * f7(x + h/2, y[0] + k1_1/2, y[1] + k1_2/2, y[2] + k1_3/2 , y[3] + k1_4/2, y[4] + k1_5/2, y[5] + k1_6/2, y[6] + k1_7/2, y[7] + k1_8/2, y[8] + k1_9/2 , y[9] + k1_10/2, y[10] + k1_11/2, y[11] + k1_12/2, m1, m2, G);
            k2_9 = h * f8(x + h/2, y[0] + k1_1/2, y[1] + k1_2/2, y[2] + k1_3/2 , y[3] + k1_4/2, y[4] + k1_5/2, y[5] + k1_6/2, y[6] + k1_7/2, y[7] + k1_8/2, y[8] + k1_9/2 , y[9] + k1_10/2, y[10] + k1_11/2, y[11] + k1_12/2, m1, m2, G);
            k2_10 = h * f9(x + h/2, y[0] + k1_1/2, y[1] + k1_2/2, y[2] + k1_3/2 , y[3] + k1_4/2, y[4] + k1_5/2, y[5] + k1_6/2, y[6] + k1_7/2, y[7] + k1_8/2, y[8] + k1_9/2 , y[9] + k1_10/2, y[10] + k1_11/2, y[11] + k1_12/2, m1, m2, G);
            k2_11 = h * f10(x + h/2, y[0] + k1_1/2, y[1] + k1_2/2, y[2] + k1_3/2 , y[3] + k1_4/2, y[4] + k1_5/2, y[5] + k1_6/2, y[6] + k1_7/2, y[7] + k1_8/2, y[8] + k1_9/2 , y[9] + k1_10/2, y[10] + k1_11/2, y[11] + k1_12/2, m1, m2, G);
            k2_12 = h * f11(x + h/2, y[0] + k1_1/2, y[1] + k1_2/2, y[2] + k1_3/2 , y[3] + k1_4/2, y[4] + k1_5/2, y[5] + k1_6/2, y[6] + k1_7/2, y[7] + k1_8/2, y[8] + k1_9/2 , y[9] + k1_10/2, y[10] + k1_11/2, y[11] + k1_12/2, m1, m2, G);

            k3_1 = h * f0(x + h/2, y[0] + k2_1/2, y[1] + k2_2/2, y[2] + k2_3/2 , y[3] + k2_4/2, y[4] + k2_5/2, y[5] + k2_6/2, y[6] + k2_7/2, y[7] + k2_8/2, y[8] + k2_9/2 , y[9] + k2_10/2, y[10] + k2_11/2, y[11] + k2_12/2, m1, m2, G);
            k3_2 = h * f1(x + h/2, y[0] + k2_1/2, y[1] + k2_2/2, y[2] + k2_3/2 , y[3] + k2_4/2, y[4] + k2_5/2, y[5] + k2_6/2, y[6] + k2_7/2, y[7] + k2_8/2, y[8] + k2_9/2 , y[9] + k2_10/2, y[10] + k2_11/2, y[11] + k2_12/2, m1, m2, G);
            k3_3 = h * f2(x + h/2, y[0] + k2_1/2, y[1] + k2_2/2, y[2] + k2_3/2 , y[3] + k2_4/2, y[4] + k2_5/2, y[5] + k2_6/2, y[6] + k2_7/2, y[7] + k2_8/2, y[8] + k2_9/2 , y[9] + k2_10/2, y[10] + k2_11/2, y[11] + k2_12/2, m1, m2, G);
            k3_4 = h * f3(x + h/2, y[0] + k2_1/2, y[1] + k2_2/2, y[2] + k2_3/2 , y[3] + k2_4/2, y[4] + k2_5/2, y[5] + k2_6/2, y[6] + k2_7/2, y[7] + k2_8/2, y[8] + k2_9/2 , y[9] + k2_10/2, y[10] + k2_11/2, y[11] + k2_12/2, m1, m2, G);
            k3_5 = h * f4(x + h/2, y[0] + k2_1/2, y[1] + k2_2/2, y[2] + k2_3/2 , y[3] + k2_4/2, y[4] + k2_5/2, y[5] + k2_6/2, y[6] + k2_7/2, y[7] + k2_8/2, y[8] + k2_9/2 , y[9] + k2_10/2, y[10] + k2_11/2, y[11] + k2_12/2, m1, m2, G);
            k3_6 = h * f5(x + h/2, y[0] + k2_1/2, y[1] + k2_2/2, y[2] + k2_3/2 , y[3] + k2_4/2, y[4] + k2_5/2, y[5] + k2_6/2, y[6] + k2_7/2, y[7] + k2_8/2, y[8] + k2_9/2 , y[9] + k2_10/2, y[10] + k2_11/2, y[11] + k2_12/2, m1, m2, G);
            k3_7 = h * f6(x + h/2, y[0] + k2_1/2, y[1] + k2_2/2, y[2] + k2_3/2 , y[3] + k2_4/2, y[4] + k2_5/2, y[5] + k2_6/2, y[6] + k2_7/2, y[7] + k2_8/2, y[8] + k2_9/2 , y[9] + k2_10/2, y[10] + k2_11/2, y[11] + k2_12/2, m1, m2, G);
            k3_8 = h * f7(x + h/2, y[0] + k2_1/2, y[1] + k2_2/2, y[2] + k2_3/2 , y[3] + k2_4/2, y[4] + k2_5/2, y[5] + k2_6/2, y[6] + k2_7/2, y[7] + k2_8/2, y[8] + k2_9/2 , y[9] + k2_10/2, y[10] + k2_11/2, y[11] + k2_12/2, m1, m2, G);
            k3_9 = h * f8(x + h/2, y[0] + k2_1/2, y[1] + k2_2/2, y[2] + k2_3/2 , y[3] + k2_4/2, y[4] + k2_5/2, y[5] + k2_6/2, y[6] + k2_7/2, y[7] + k2_8/2, y[8] + k2_9/2 , y[9] + k2_10/2, y[10] + k2_11/2, y[11] + k2_12/2, m1, m2, G);
            k3_10 = h * f9(x + h/2, y[0] + k2_1/2, y[1] + k2_2/2, y[2] + k2_3/2 , y[3] + k2_4/2, y[4] + k2_5/2, y[5] + k2_6/2, y[6] + k2_7/2, y[7] + k2_8/2, y[8] + k2_9/2 , y[9] + k2_10/2, y[10] + k2_11/2, y[11] + k2_12/2, m1, m2, G);
            k3_11 = h * f10(x + h/2, y[0] + k2_1/2, y[1] + k2_2/2, y[2] + k2_3/2 , y[3] + k2_4/2, y[4] + k2_5/2, y[5] + k2_6/2, y[6] + k2_7/2, y[7] + k2_8/2, y[8] + k2_9/2 , y[9] + k2_10/2, y[10] + k2_11/2, y[11] + k2_12/2, m1, m2, G);
            k3_12 = h * f11(x + h/2, y[0] + k2_1/2, y[1] + k2_2/2, y[2] + k2_3/2 , y[3] + k2_4/2, y[4] + k2_5/2, y[5] + k2_6/2, y[6] + k2_7/2, y[7] + k2_8/2, y[8] + k2_9/2 , y[9] + k2_10/2, y[10] + k2_11/2, y[11] + k2_12/2, m1, m2, G);

            k4_1 = h * f0(x + h, y[0] + k3_1, y[1] + k3_2, y[2] + k3_3 , y[3] + k3_4, y[4] + k3_5, y[5] + k3_6, y[6] + k3_7 , y[7] + k3_8, y[8] + k3_9, y[9] + k3_10, y[10] + k3_11 , y[11] + k3_12, m1, m2, G);
            k4_2 = h * f1(x + h, y[0] + k3_1, y[1] + k3_2, y[2] + k3_3 , y[3] + k3_4, y[4] + k3_5, y[5] + k3_6, y[6] + k3_7 , y[7] + k3_8, y[8] + k3_9, y[9] + k3_10, y[10] + k3_11 , y[11] + k3_12, m1, m2, G);
            k4_3 = h * f2(x + h, y[0] + k3_1, y[1] + k3_2, y[2] + k3_3 , y[3] + k3_4, y[4] + k3_5, y[5] + k3_6, y[6] + k3_7 , y[7] + k3_8, y[8] + k3_9, y[9] + k3_10, y[10] + k3_11 , y[11] + k3_12, m1, m2, G);
            k4_4 = h * f3(x + h, y[0] + k3_1, y[1] + k3_2, y[2] + k3_3 , y[3] + k3_4, y[4] + k3_5, y[5] + k3_6, y[6] + k3_7 , y[7] + k3_8, y[8] + k3_9, y[9] + k3_10, y[10] + k3_11 , y[11] + k3_12, m1, m2, G);
            k4_5 = h * f4(x + h, y[0] + k3_1, y[1] + k3_2, y[2] + k3_3 , y[3] + k3_4, y[4] + k3_5, y[5] + k3_6, y[6] + k3_7 , y[7] + k3_8, y[8] + k3_9, y[9] + k3_10, y[10] + k3_11 , y[11] + k3_12, m1, m2, G);
            k4_6 = h * f5(x + h, y[0] + k3_1, y[1] + k3_2, y[2] + k3_3 , y[3] + k3_4, y[4] + k3_5, y[5] + k3_6, y[6] + k3_7 , y[7] + k3_8, y[8] + k3_9, y[9] + k3_10, y[10] + k3_11 , y[11] + k3_12, m1, m2, G);
            k4_7 = h * f6(x + h, y[0] + k3_1, y[1] + k3_2, y[2] + k3_3 , y[3] + k3_4, y[4] + k3_5, y[5] + k3_6, y[6] + k3_7 , y[7] + k3_8, y[8] + k3_9, y[9] + k3_10, y[10] + k3_11 , y[11] + k3_12, m1, m2, G);
            k4_8 = h * f7(x + h, y[0] + k3_1, y[1] + k3_2, y[2] + k3_3 , y[3] + k3_4, y[4] + k3_5, y[5] + k3_6, y[6] + k3_7 , y[7] + k3_8, y[8] + k3_9, y[9] + k3_10, y[10] + k3_11 , y[11] + k3_12, m1, m2, G);
            k4_9 = h * f8(x + h, y[0] + k3_1, y[1] + k3_2, y[2] + k3_3 , y[3] + k3_4, y[4] + k3_5, y[5] + k3_6, y[6] + k3_7 , y[7] + k3_8, y[8] + k3_9, y[9] + k3_10, y[10] + k3_11 , y[11] + k3_12, m1, m2, G);
            k4_10 = h * f9(x + h, y[0] + k3_1, y[1] + k3_2, y[2] + k3_3 , y[3] + k3_4, y[4] + k3_5, y[5] + k3_6, y[6] + k3_7 , y[7] + k3_8, y[8] + k3_9, y[9] + k3_10, y[10] + k3_11 , y[11] + k3_12, m1, m2, G);
            k4_11 = h * f10(x + h, y[0] + k3_1, y[1] + k3_2, y[2] + k3_3 , y[3] + k3_4, y[4] + k3_5, y[5] + k3_6, y[6] + k3_7 , y[7] + k3_8, y[8] + k3_9, y[9] + k3_10, y[10] + k3_11 , y[11] + k3_12, m1, m2, G);
            k4_12 = h * f11(x + h, y[0] + k3_1, y[1] + k3_2, y[2] + k3_3 , y[3] + k3_4, y[4] + k3_5, y[5] + k3_6, y[6] + k3_7 , y[7] + k3_8, y[8] + k3_9, y[9] + k3_10, y[10] + k3_11 , y[11] + k3_12, m1, m2, G);


            y[0] += (k1_1 + 2*k2_1 + 2*k3_1 + k4_1)/6;
            y[1] += (k1_2 + 2*k2_2 + 2*k3_2 + k4_2)/6;
            y[2] += (k1_3 + 2*k2_3 + 2*k3_3 + k4_3)/6;
            y[3] += (k1_4 + 2*k2_4 + 2*k3_4 + k4_4)/6;
            y[4] += (k1_5 + 2*k2_5 + 2*k3_5 + k4_5)/6;
            y[5] += (k1_6 + 2*k2_6 + 2*k3_6 + k4_6)/6;
            y[6] += (k1_7 + 2*k2_7 + 2*k3_7 + k4_7)/6;
            y[7] += (k1_8 + 2*k2_8 + 2*k3_8 + k4_8)/6;
            y[8] += (k1_9 + 2*k2_9 + 2*k3_9 + k4_9)/6;
            y[9] += (k1_10 + 2*k2_10 + 2*k3_10 + k4_10)/6;
            y[10] += (k1_11 + 2*k2_11 + 2*k3_11 + k4_11)/6;
            y[11] += (k1_12 + 2*k2_12 + 2*k3_12 + k4_12)/6;

            a[i][0] = y[0];
            a[i][1] = y[1];
            a[i][2] = y[2];
            a[i][3] = y[3];
            a[i][4] = y[4];
            a[i][5] = y[5];
            a[i][6] = y[6];
            a[i][7] = y[7];
            a[i][8] = y[8];
            a[i][9] = y[9];
            a[i][10] = y[10];
            a[i][11] = y[11];

            x += h;            
        }
    } 
